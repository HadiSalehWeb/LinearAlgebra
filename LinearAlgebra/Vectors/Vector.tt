<#@ template  debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Windows.Forms" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#
    var supportedDimensions = new List<int> { 0, 1, 2, 3, 4, 5 };
    var componentName = new Func<int, int, string>((n, i) => n < 5 ? "xyzw"[i].ToString() : "v" + i);
    var index = 0;
    var directionVocabulary = new List<Tuple<string, string>> 
    {
        Tuple.Create("right", "left"),
        Tuple.Create("up", "down"),
        Tuple.Create("forward", "backward"),
        Tuple.Create("ana", "kata")
    };
    var primes = new List<int> { 
		1,
		2136537719,
		298955857,
		421235453,
		311692756,
		270262448,
		374968597,
		956762603
	};
#>
using LinearAlgebra.Scalars;
using System;
using System.Collections;
using System.Collections.Generic;

namespace LinearAlgebra.Vectors
{
<# foreach (var n in supportedDimensions) { #>
    [Serializable]
    public struct Vector<#= n #><T> :
        ICloneable,
        IEquatable<Vector<#= n #><T>>,
        IEnumerable,
        IEnumerable<Scalar<T>>,
        IEnumerable<T>,
        IVector<T, Vector<#= n #><T>>
        where T : struct
    {
        #region Fields and Properties

<# if (n > 0) { #>
        public readonly Scalar<T> <#= string.Join(", ", Enumerable.Range(0, n).Select(i => componentName(n, i))) #>;

<# } #>
        public Scalar<int> Rank => Scalar<int>.One;
        public Vector1<int> Dimension => <#= n #>;
        public int Length => <#= n #>;
        public Scalar<T>[] Data => new Scalar<T>[<#= n #>] {<#= string.Join(",", Enumerable.Range(0, n).Select(i => " " + componentName(n, i))) #> };
        public Scalar<T> this[int i] => Data[i];

        #endregion

        #region Static

        public static readonly Vector<#= n #><T> zero = new Vector<#= n #><T>(<#= string.Join(", ", Enumerable.Range(0, n).Select(i => "Scalar<T>.Zero")) #>);
        public static readonly Vector<#= n #><T> one = new Vector<#= n #><T>(<#= string.Join(", ", Enumerable.Range(0, n).Select(i => "Scalar<T>.One")) #>);

<# for (int i = 0; i < n; i++) { #>
<# if (i < directionVocabulary.Count) { #>
        public static readonly Vector<#= n #><T> <#= directionVocabulary[i].Item1 #> = new Vector<#= n #><T>(<#= string.Join(", ", Enumerable.Range(0, n).Select(j => i == j ? "Scalar<T>.One" : "Scalar<T>.Zero")) #>);
        public static readonly Vector<#= n #><T> <#= directionVocabulary[i].Item2 #> = new Vector<#= n #><T>(<#= string.Join(", ", Enumerable.Range(0, n).Select(j => i == j ? "-Scalar<T>.One" : "Scalar<T>.Zero")) #>);

<# } else { #>
        public static readonly Vector<#= n #><T> basis<#= i + 1 #> = new Vector<#= n #><T>(<#= string.Join(", ", Enumerable.Range(0, n).Select(j => i == j ? "Scalar<T>.One" : "Scalar<T>.Zero")) #>);

<# } #>
<# } #>
        #endregion

<# if (n > 0) { #>
        #region Constructors

        public Vector<#= n #>(<#= string.Join(", ", Enumerable.Range(0, n).Select(x => "Scalar<T> " + componentName(n, x))) #>)
        {
<# for (int i = 0; i < n; i++) { #>
            this.<#= componentName(n, i) #> = <#= componentName(n, i) #>;
<# } #>
        }

        public Vector<#= n #>(<#= string.Join(", ", Enumerable.Range(0, n).Select(x => "T " + componentName(n, x))) #>)
        {
<# for (int i = 0; i < n; i++) { #>
            this.<#= componentName(n, i) #> = new Scalar<T>(<#= componentName(n, i) #>);
<# } #>
        }

<# if (n > 1) { #>
        public Vector<#= n #>(Scalar<T> s)
        {
<# for (int i = 0; i < n; i++) { #>
            <#= componentName(n, i) #> = s;
<# } #>
        }

        public Vector<#= n #>(T t)
        {
<# for (int i = 0; i < n; i++) { #>
            <#= componentName(n, i) #> = new Scalar<T>(t);
<# } #>
        }

<# } #>
        #endregion

<# } #>
        #region Functions

        public Scalar<T> SqrMagnitude => <#= n > 0 ? string.Join(" + ", Enumerable.Range(0, n).Select(x => componentName(n, x) + " * " + componentName(n, x))) : "Scalar<T>.Zero" #>;
        public Scalar<T> Magnitude => Math.Sqrt(SqrMagnitude);
        public Vector<#= n #><T> Normalized => this / Magnitude;

        public Scalar<T> Norm(int p)
        {
            if (p < 1) throw new ArgumentException("p must be greater than or equal to 1.", nameof(p));
<# if (n > 1) { #>
            return Math.Pow(<#= string.Join(" + ", Enumerable.Range(0, n).Select(x => "Math.Pow(" + componentName(n, x) + ", p)")) #>, 1d / p);
<# } else if (n == 1) { #>
            return <#= componentName(n, 0) #>;
<# } else { #>
            return Scalar<T>.Zero;
<# } #>
        }

        public Scalar<T> MaximumNorm()
        {
<# if (n > 1) { #>
            Scalar<T> max = <#= componentName(n, 0) #>;

<# for (int i = 1; i < n; i++) { #>
            if (<#= componentName(n, i) #> > max)
                max = <#= componentName(n, i) #>;
<# } #>

            return max;
<# } else if (n == 1) { #>
            return <#= componentName(n, 0) #>;
<# } else { #>
            return Scalar<T>.Zero;
<# } #>
        }

        public Vector<#= n #><T> Scale(Vector<#= n #><T> vec)
        {
            return new Vector<#= n #><T>(<#= string.Join(", ", Enumerable.Range(0, n).Select(x => componentName(n, x) + " * vec." + componentName(n, x))) #>);
        }

        public Scalar<T> Dot(Vector<#= n #><T> vec)
        {
            return <#= n > 0 ? string.Join(" + ", Enumerable.Range(0, n).Select(x => componentName(n, x) + " * vec." + componentName(n, x))) : "Scalar<T>.Zero" #>;
        }

        public Scalar<T> AngleTo(Vector<#= n #><T> vec)
        {
            return Math.Acos(Dot(vec) / (Magnitude * vec.Magnitude));
        }

        public Vector<#= n #><T> ProjectionOnto(Vector<#= n #><T> vec)
        {
            return vec.Multiply(Dot(vec) / vec.Dot(vec));
        }

        public Scalar<T> SquareDistanceTo(Vector<#= n #><T> vec)
        {
            return Substract(vec).SqrMagnitude;
        }

        public Scalar<T> DistanceTo(Vector<#= n #><T> vec)
        {
            return Substract(vec).Magnitude;
        }

        public Vector<#= n #><T> Lerp(Vector<#= n #><T> vec, Scalar<T> t)
        {
            return Add(vec.Substract(this).Multiply(t));
        }

        #endregion

        #region Operators

        #region Arithmetic

        public Vector<#= n #><T> Add(Vector<#= n #><T> vec)
        {
            return new Vector<#= n #><T>(<#= string.Join(", ", Enumerable.Range(0, n).Select(x => componentName(n, x) + " + vec." + componentName(n, x))) #>);
        }

        public static Vector<#= n #><T> operator +(Vector<#= n #><T> left, Vector<#= n #><T> right)
        {
            return left.Add(right);
        }

        public Vector<#= n #><T> Substract(Vector<#= n #><T> vec)
        {
            return new Vector<#= n #><T>(<#= string.Join(", ", Enumerable.Range(0, n).Select(x => componentName(n, x) + " - vec." + componentName(n, x))) #>);
        }

        public static Vector<#= n #><T> operator -(Vector<#= n #><T> left, Vector<#= n #><T> right)
        {
            return left.Substract(right);
        }

        public Vector<#= n #><T> Multiply(Scalar<T> s)
        {
            return new Vector<#= n #><T>(<#= string.Join(", ", Enumerable.Range(0, n).Select(x => componentName(n, x) + " * s")) #>);
        }

        public static Vector<#= n #><T> operator *(Vector<#= n #><T> left, Scalar<T> right)
        {
            return left.Multiply(right);
        }

        public static Vector<#= n #><T> operator *(Scalar<T> left, Vector<#= n #><T> right)
        {
            return right.Multiply(left);
        }

        public Vector<#= n #><T> Divide(Scalar<T> s)
        {
            return new Vector<#= n #><T>(<#= string.Join(", ", Enumerable.Range(0, n).Select(x => componentName(n, x) + " / s")) #>);
        }

        public static Vector<#= n #><T> operator /(Vector<#= n #><T> left, Scalar<T> right)
        {
            return left.Divide(right);
        }

        public Vector<#= n #><T> GetDividedBy(Scalar<T> s)
        {
            return new Vector<#= n #><T>(<#= string.Join(", ", Enumerable.Range(0, n).Select(x => "s / " + componentName(n, x))) #>);
        }

        public Vector<#= n #><T> Reciprocal()
        {
            return new Vector<#= n #><T>(<#= string.Join(", ", Enumerable.Range(0, n).Select(x => "Scalar<T>.One / " + componentName(n, x))) #>);
        }

        public static Vector<#= n #><T> operator /(Scalar<T> left, Vector<#= n #><T> right)
        {
            return right.GetDividedBy(left);
        }

        public Vector<#= n #><T> Negate()
        {
            return new Vector<#= n #><T>(<#= string.Join(", ", Enumerable.Range(0, n).Select(x => "-" + componentName(n, x))) #>);
        }

        public static Vector<#= n #><T> operator -(Vector<#= n #><T> v)
        {
            return v.Negate();
        }

        #endregion

        #region Identity

        public static bool operator ==(Vector<#= n #><T> left, Vector<#= n #><T> right)
        {
            return <#= n > 0 ? string.Join(" && ", Enumerable.Range(0, n).Select(x => "left." + componentName(n, x) + " == right." + componentName(n, x))) : "true" #>;
        }

        public static bool operator !=(Vector<#= n #><T> left, Vector<#= n #><T> right)
        {
            return <#= n > 0 ? string.Join(" || ", Enumerable.Range(0, n).Select(x => "left." + componentName(n, x) + " != right." + componentName(n, x))) : "false" #>;
        }

        #endregion

        #endregion

        #region Implicit Conversion

<# if (n > 0) { #>
        public static implicit operator Vector<#= n #><T>(<#= n == 1 ? "T" : "(" + string.Join(", ", Enumerable.Repeat("T", n)) + ")" #> t)
        {
            return new Vector<#= n #><T>(<#= n == 1 ? "t" : string.Join(", ", Enumerable.Range(1, n).Select(x => "t.Item" + x)) #>);
        }

        public static implicit operator <#= n == 1 ? "T" : "(" + string.Join(", ", Enumerable.Repeat("T", n)) + ") " #>(Vector<#= n #><T> vec)
        {
            return <#= n == 1 ? "vec.x.Value" : "(" + string.Join(", ", Enumerable.Range(0, n).Select(i => "vec." + componentName(n, i) + ".Value")) + ")" #>;
        }

<# } #>
        public static implicit operator Vector<T>(Vector<#= n #><T> t)
        {
            return new Vector<T>(t.Data);
        }

        public static implicit operator T[] (Vector<#= n #><T> t)
        {
            return new T[<#= n #>] {<#= string.Join(",", Enumerable.Range(0, n).Select(x => " t." + componentName(n, x) + ".Value")) #> };
        }

<# if (n > 0) { #>
        public void Deconstruct(<#= string.Join(", ", Enumerable.Range(0, n).Select(x => "out T " + componentName(n, x))) #>)
        {
<# for (int i = 0; i < n; i++) { #>
            <#= componentName(n, i) #> = this.<#= componentName(n, i) #>.Value;
<# } #>
        }

<# } #>
        #endregion

        #region Interface Implementation

        public object Clone()
        {
            return new Vector<#= n #><T>(<#= string.Join(", ", Enumerable.Range(0, n).Select(x => componentName(n, x))) #>);
        }

        IEnumerator<Scalar<T>> IEnumerable<Scalar<T>>.GetEnumerator()
        {
<# if (n > 0) { #>
<# for (int i = 0; i < n; i++) { #>
            yield return <#= componentName(n, i) #>;
<# } #>
<# } else { #>
            yield break;
<# } #>
        }

        public IEnumerator<T> GetEnumerator()
        {
<# if (n > 0) { #>
<# for (int i = 0; i < n; i++) { #>
            yield return <#= componentName(n, i) #>.Value;
<# } #>
<# } else { #>
            yield break;
<# } #>
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return this.GetEnumerator();
        }

        public bool Equals(Vector<#= n #><T> other)
        {
            return <#= n > 0 ? string.Join(" && ", Enumerable.Range(0, n).Select(x => componentName(n, x) + ".Equals(other." + componentName(n, x) + ")")) : "true" #>;
        }

        public override bool Equals(object obj)
        {
            if (obj is Vector<#= n #><T> vec)
                return <#= n > 0 ? string.Join(" && ", Enumerable.Range(0, n).Select(x => componentName(n, x) + ".Equals(vec." + componentName(n, x) + ")")) : "true" #>;

            return false;
        }

        public override string ToString()
        {
            return $"Vector<#= n #>(<#= string.Join(", ", Enumerable.Range(0, n).Select(x => "{ " + componentName(n, x) + " }" )) #>)";
        }

        public override int GetHashCode()
        {
            return <#= n > 0 ? string.Join(" + ", Enumerable.Range(0, n).Select(x => (n <= primes.Count ? primes[x] + " * " : "") + componentName(n, x))) : "0" #>;
        }

        #endregion
    }
<# index++; if (index != supportedDimensions.Count) { #>

<# } #>
<# } #>
}

namespace LinearAlgebra.Vectors.Extensions
{
    public static partial class VectorExtansions
    {
<# index = 0; foreach (var n in supportedDimensions) { index++; #>
<# if (n > 0) { #>
        #region Vector<#= n #> Extensions

        public static Vector<#= n #><TResult> Select<T, TResult>(this Vector<#= n #><T> t, Func<T, TResult> func)
            where T : struct
            where TResult : struct
        {
            return new Vector<#= n #><TResult>(<#= string.Join(", ", Enumerable.Range(0, n).Select(x => "func(t." + componentName(n, x) + ".Value)")) #>);
        }

        public static Vector<#= n #><TResult> Select<T, TResult>(this Vector<#= n #><T> t, Func<T, int, TResult> func)
            where T : struct
            where TResult : struct
        {
            return new Vector<#= n #><TResult>(<#= string.Join(", ", Enumerable.Range(0, n).Select(x => "func(t." + componentName(n, x) + ".Value, " + x + ")")) #>);
        }

        public static T Aggregate<T>(this Vector<#= n #><T> v, Func<T, T, T> func)
            where T : struct
        {
            return <#= Enumerable.Range(0, n - 1).Aggregate("v." + componentName(n, 0) + ".Value", (a, c) => "func(" + a + ", v." + componentName(n, c + 1) + ".Value)") #>;
        }

        public static TResult Aggregate<T, TResult>(this Vector<#= n #><T> v, TResult seed, Func<TResult, T, TResult> func)
            where T : struct
            where TResult : struct
        {
            return <#= Enumerable.Range(0, n).Aggregate("seed", (a, c) => "func(" + a + ", v." + componentName(n, c) + ".Value)") #>;
        }

        public static TResult Aggregate<T, TAccumulate, TResult>(this Vector<#= n #><T> v, TAccumulate seed, Func<TAccumulate, T, TAccumulate> func, Func<TAccumulate, TResult> resultSelector)
            where T : struct
            where TResult : struct
        {
            return resultSelector(<#= Enumerable.Range(0, n).Aggregate("seed", (a, c) => "func(" + a + ", v." + componentName(n, c) + ".Value)") #>);
        }

        public static bool All<T>(this Vector<#= n #><T> v, Func<T, bool> pred)
            where T : struct
        {
            return <#= string.Join(" && ", Enumerable.Range(0, n).Select(x => "pred(v." + componentName(n, x) + ".Value)")) #>;
        }

        public static bool Any<T>(this Vector<#= n #><T> v, Func<T, bool> pred)
            where T : struct
        {
            return <#= string.Join(" || ", Enumerable.Range(0, n).Select(x => "pred(v." + componentName(n, x) + ".Value)")) #>;
        }

        public static double Average<T>(this Vector<#= n #><T> v)
            where T : struct
        {
            return (new Scalar<double>(<#= string.Join(" + ", Enumerable.Range(0, n).Select(x => "v." + componentName(n, x))) #>) / <#= n #>.0).Value;
        }

        public static bool Contains<T>(this Vector<#= n #><T> v, T t)
            where T : struct
        {
            return <#= string.Join(" || ", Enumerable.Range(0, n).Select(x => "v." + componentName(n, x) + ".Value.Equals(t)")) #>;
        }

        #endregion
<# if (index != supportedDimensions.Count) { #>

<# } #>
<# } #>
<# } #>
    }
}